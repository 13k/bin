#!/usr/bin/env bash
#
# https://gist.github.com/netj/526585
# memusg -- Measure memory usage of processes
# Usage: memusg [options] [--] COMMAND [ARGS]...
#
# Options:
#   -h      Help
#   -m      Constantly print memory usage to stderr
# ===
# Author: Jaeho Shin <netj@sparcs.org>
# Created: 2010-08-16
############################################################################
# Copyright 2010 Jaeho Shin.                                               #
#                                                                          #
# Licensed under the Apache License, Version 2.0 (the "License");          #
# you may not use this file except in compliance with the License.         #
# You may obtain a copy of the License at                                  #
#                                                                          #
#     http://www.apache.org/licenses/LICENSE-2.0                           #
#                                                                          #
# Unless required by applicable law or agreed to in writing, software      #
# distributed under the License is distributed on an "AS IS" BASIS,        #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. #
# See the License for the specific language governing permissions and      #
# limitations under the License.                                           #
############################################################################
set -um

help() {
	sed -n '2,/^# ===$/ s/^# =*//p' <"$0"
	exit 1
}

# TODO support more options: peak, footprint, sampling rate, etc.
monitor=0

while getopts ":mh" opt; do
	case $opt in
		h)
			help;;
		m)
			monitor=1;;
		\?)
			printf >&2 "Invalid option: -$OPTARG\n"
			help;;
	esac
done

shift $((OPTIND-1))

# check input
[[ $# -gt 0 ]] || { help; }

pgid=$(ps -o pgid= $$)
# make sure we're in a separate process group
if [[ "$pgid" == "$(ps -o pgid= $(ps -o ppid= $$))" ]]; then
	cmd=
	set -- "$0" "$@"
	for a; do cmd+="'${a//"'"/"'\\''"}' "; done
	exec bash -i -c "$cmd"
fi

# detect operating system and prepare measurement
case $(uname) in
	Darwin|*BSD) sizes() { /bin/ps -o rss= -g $1; } ;;
	Linux) sizes() { /bin/ps -o rss= -$1; } ;;
	*) echo "$(uname): unsupported operating system" >&2; exit 2 ;;
esac

sum_expr() { echo ${@/#/+}; }

# monitor the memory usage in the background.
(
peak=0
while sizes=$(sizes $pgid)
do
	sample=$(($(sum_expr $sizes)))
	peak=$((sample > peak ? sample : peak))

	if [[ "$monitor" = "1" ]]; then
		printf >&2 "\rmemusg: peak=%s" "$peak"
	fi

	sleep 0.1
done

if [[ "$monitor" != "1" ]]; then
	printf >&2 "\nmemusg: peak=%s" "$peak"
fi

printf >&2 "\n"
) &
monpid=$!

# run the given command
exec "$@"
